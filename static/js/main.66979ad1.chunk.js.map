{"version":3,"sources":["component/Card.js","component/CardList.js","component/SearchBox.js","component/Scroll.js","component/ErrorBoundary.js","container/App.js","reportWebVitals.js","index.js"],"names":["card","props","name","email","id","className","alt","src","cardList","robots","cardComponent","map","user","i","Card","SearcBox","searchfield","searchChange","type","placeholder","onChange","Scroll","Component","style","overflow","border","height","children","App","useState","setRobots","setSearchfield","useEffect","fetch","then","response","json","users","filteredRobots","filter","robot","console","log","toLowerCase","includes","length","SearchBox","event","target","value","CardList","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"iNAeeA,EAbF,SAACC,GACV,IAAQC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAOC,EAAOH,EAAPG,GACrB,OACI,sBAAKC,UAAU,mDAAf,UACI,qBAAKC,IAAM,QAAQC,IAAG,+BAA4BH,EAA5B,cACtB,gCACI,6BAAKF,IACL,4BAAIC,WCOLK,EAbE,SAACP,GAId,IAAQQ,EAAWR,EAAXQ,OACFC,EAAgBD,EAAOE,KAAI,SAACC,EAAMC,GACpC,OAAO,cAACC,EAAD,CAA0BV,GAAOK,EAAOI,GAAGT,GAAKF,KAASO,EAAOI,GAAGX,KAAOC,MAAUM,EAAOI,GAAGV,OAAnFM,EAAOI,GAAGT,OAEhC,OAAO,8BACKM,KCGDK,EAbE,SAAC,GAAgC,EAA9BC,YAA+B,IAAlBC,EAAiB,EAAjBA,aAC7B,OACI,qBAAKZ,UAAU,MAAf,SACI,uBACEA,UAAU,mCACVa,KAAO,SACPC,YAAc,gBACdC,SAAWH,O,4BCCVI,GCRaC,Y,MDAb,SAACrB,GACZ,OACI,qBAAKsB,MAAO,CAAEC,SAAU,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKzB,EAAM0B,aEoEJC,MAvCf,WAEI,MAA4BC,mBAAS,IAArC,mBAAOpB,EAAP,KAAeqB,EAAf,KACA,EAAsCD,mBAAS,IAA/C,mBAAOb,EAAP,KAAoBe,EAApB,KAEAC,qBAAU,WACNC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACzBF,MAAK,SAAAG,GAAUP,EAAUO,QAE5B,IAEJ,IAIMC,EAAiB7B,EAAO8B,QAAO,SAAAC,GAEjC,OADAC,QAAQC,IAAIF,GACLA,EAAMtC,KAAKyC,cAAcC,SAAS5B,EAAY2B,kBAGzD,OAAKlC,EAAOoC,OAIJ,sBAAKxC,UAAU,KAAf,UACI,4CACA,cAACyC,EAAD,CAAW7B,aAfA,SAAC8B,GACpBhB,EAAegB,EAAMC,OAAOC,UAepB,cAAC,EAAD,UAEQ,cAACC,EAAD,CAAUzC,OAAW6B,SAR9B,oBAAIjC,UAAU,KAAd,8BC5CA8C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBnB,MAAK,YAAkD,IAA/CoB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACN,cAAC,EAAD,IACCC,SAASC,eAAe,SAM5BX,M","file":"static/js/main.66979ad1.chunk.js","sourcesContent":["import React from 'react'\n\nconst card = (props) => {\n    const { name, email, id } = props;\n    return(\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt = 'Robot' src = {`https://robohash.org/${id}?200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    );\n}\n\nexport default card;","import React from 'react'\nimport Card from './Card'\n\nconst cardList = (props) => {\n    // if (true){\n    //     throw new Error('New Error testing');\n    // }\n    const { robots } = props;\n    const cardComponent = robots.map((user, i)=>{\n        return <Card key={robots[i].id}  id = { robots[i].id } name = { robots[i].name } email = { robots[i].email }/>\n    } );\n    return <div>\n              { cardComponent }\n           </div>\n}\n\nexport default cardList;","import React from 'react';\n\nconst SearcBox = ({ searchfield, searchChange })=>{\n    return (\n        <div className='pa2'>\n            <input \n              className='pa3 ba b--green bg-lightest-blue'\n              type = 'search' \n              placeholder = 'Search robots' \n              onChange={ searchChange }\n            />\n        </div>\n    );\n}\n\nexport default SearcBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{ overflow: 'scroll', border: '1px solid black', height: '500px'}}>\n            {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundary extends Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        }\n    }\n\n    componentDidCatch(){\n        this.setState({ hasError: true })\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1>SOmething went wrong!!!</h1>\n        }else{\n            return this.props.children\n        }\n    }\n}\n\nexport default ErrorBoundary;","import React, { useState, useEffect } from 'react';\nimport CardList from '../component/CardList';\n// import { robots } from '../component/Robots';\nimport SearchBox from '../component/SearchBox'\nimport ErrorBoundary from '../component/ErrorBoundary';\nimport './App.css'\nimport Scroll from '../component/Scroll';\n\n// function App() {\n\n\n  \n//     const onSearchChange = (event) => {\n//       setSearchfield(event.target.value)\n//     }\n  \n    \n  \n//     return !robots.length ?\n//       <h1>Loading</h1> :\n//       (\n//         <div className='tc'>\n//           <h1 className='f1'>RoboFriends</h1>\n//           <button onClick={()=>setCount(count+1)}>Click Me!</button>\n//           <SearchBox searchChange={onSearchChange}/>\n//           <Scroll>\n//             <CardList robots={filteredRobots} />\n//           </Scroll>\n//         </div>\n//       );\n//   }\n  \n//   export default App;\n\nfunction App() {\n\n    const [robots, setRobots] = useState([])\n    const [searchfield, setSearchfield] = useState('')\n\n    useEffect(()=> {\n        fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response=> response.json())\n          .then(users => {setRobots(users)});\n        // console.log(count)\n      },[]) // if you add count, only run if count changes.\n\n    const onSearchChange = (event) => {\n        setSearchfield(event.target.value)\n    }\n\n    const filteredRobots = robots.filter(robot => {\n        console.log(robot)\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase())\n    })\n\n    if (!robots.length){\n        return <h1 className='tc'>Loading........</h1>\n    }else{\n        return (\n            <div className='tc'>\n                <h1>Robofirens</h1>\n                <SearchBox searchChange = { onSearchChange }/>\n                <Scroll>\n                    {/* <ErrorBoundary> */}\n                        <CardList robots = { filteredRobots }/>\n                    {/* </ErrorBoundary> */}\n                </Scroll>\n            </div>\n        );\n    }\n    \n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './container/App'\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons'\n\nReactDOM.render(\n   <App />\n  , document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}